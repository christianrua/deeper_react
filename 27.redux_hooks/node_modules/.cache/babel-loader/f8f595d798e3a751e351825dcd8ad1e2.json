{"ast":null,"code":"import { useState, useEffect } from 'react';\nlet globalState = {};\nlet listeners = [];\nlet actions = {};\nexport const useStore = (shouldListen = true) => {\n  const setState = useState(globalState)[1];\n\n  const dispatch = (actionIdentifier, payload) => {\n    const newState = actions[actionIdentifier](globalState, payload);\n    globalState = { ...globalState,\n      ...newState\n    };\n\n    for (const listener of listeners) {\n      listener(globalState);\n    }\n  };\n\n  useEffect(() => {\n    if (shouldListen) {\n      listeners.push(setState);\n    }\n\n    return () => {\n      if (shouldListen) {\n        listeners = listeners.filter(li => li !== setState);\n      }\n    };\n  }, [setState, shouldListen]);\n  return [globalState, dispatch];\n};\nexport const initStore = (userActions, initialState) => {\n  if (initialState) {\n    globalState = { ...globalState,\n      ...initialState\n    };\n  }\n\n  actions = { ...actions,\n    ...userActions\n  };\n};","map":{"version":3,"sources":["/home/chr1st14n_ru4/development/react_course/27.redux_hooks/src/hooks-store/store.js"],"names":["useState","useEffect","globalState","listeners","actions","useStore","shouldListen","setState","dispatch","actionIdentifier","payload","newState","listener","push","filter","li","initStore","userActions","initialState"],"mappings":"AAAA,SAAQA,QAAR,EAAiBC,SAAjB,QAAiC,OAAjC;AAEA,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,SAAS,GAAG,EAAhB;AACA,IAAIC,OAAO,GAAG,EAAd;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,YAAY,GAAG,IAAhB,KAAyB;AAC7C,QAAMC,QAAQ,GAAGP,QAAQ,CAACE,WAAD,CAAR,CAAsB,CAAtB,CAAjB;;AAEA,QAAMM,QAAQ,GAAG,CAACC,gBAAD,EAAmBC,OAAnB,KAA+B;AAC5C,UAAMC,QAAQ,GAAGP,OAAO,CAACK,gBAAD,CAAP,CAA0BP,WAA1B,EAAuCQ,OAAvC,CAAjB;AACAR,IAAAA,WAAW,GAAG,EAAC,GAAGA,WAAJ;AAAiB,SAAGS;AAApB,KAAd;;AAEA,SAAK,MAAMC,QAAX,IAAuBT,SAAvB,EAAiC;AAC7BS,MAAAA,QAAQ,CAACV,WAAD,CAAR;AACH;AACJ,GAPD;;AASAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIK,YAAJ,EAAkB;AACdH,MAAAA,SAAS,CAACU,IAAV,CAAeN,QAAf;AACH;;AAGD,WAAO,MAAM;AACT,UAAGD,YAAH,EAAgB;AACZH,QAAAA,SAAS,GAAGA,SAAS,CAACW,MAAV,CAAiBC,EAAE,IAAIA,EAAE,KAAKR,QAA9B,CAAZ;AACH;AAEJ,KALD;AAMH,GAZQ,EAYP,CAACA,QAAD,EAAUD,YAAV,CAZO,CAAT;AAcA,SAAO,CAACJ,WAAD,EAAcM,QAAd,CAAP;AAEH,CA5BM;AA8BP,OAAO,MAAMQ,SAAS,GAAG,CAACC,WAAD,EAAcC,YAAd,KAA+B;AACpD,MAAGA,YAAH,EAAiB;AACbhB,IAAAA,WAAW,GAAG,EAAC,GAAGA,WAAJ;AAAiB,SAAGgB;AAApB,KAAd;AACH;;AACDd,EAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,OAAGa;AAAhB,GAAV;AACH,CALM","sourcesContent":["import {useState,useEffect} from 'react';\n\nlet globalState = {};\nlet listeners = [];\nlet actions = {};\n\nexport const useStore = (shouldListen = true) => {\n    const setState = useState(globalState)[1];\n\n    const dispatch = (actionIdentifier, payload) => {\n        const newState = actions[actionIdentifier](globalState, payload);\n        globalState = {...globalState, ...newState};\n\n        for (const listener of listeners){\n            listener(globalState);\n        }\n    };\n\n    useEffect(() => {\n        if (shouldListen) {\n            listeners.push(setState);\n        }\n        \n\n        return () => {\n            if(shouldListen){\n                listeners = listeners.filter(li => li !== setState);\n            }\n            \n        }\n    },[setState,shouldListen]);\n\n    return [globalState, dispatch];\n    \n};\n\nexport const initStore = (userActions, initialState) => {\n    if(initialState) {\n        globalState = {...globalState, ...initialState};\n    }\n    actions = {...actions, ...userActions};\n}; "]},"metadata":{},"sourceType":"module"}